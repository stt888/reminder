{"version":3,"sources":["components/App.js","actions.js","action-type.js","serviceWorker.js","reducers/index.js","index.js"],"names":["App","state","text","dueDate","addReminder","_this","props","removeReminder","id","clearReminder","_this2","this","reminders","react_default","a","createElement","className","type","placeholder","onChange","event","setState","target","value","onClick","map","reminder","index","key","moment","Date","fromNow","Component","connect","Boolean","window","location","hostname","match","arguments","length","undefined","read_cookie","action","concat","Object","toConsumableArray","bake_cookie","filter","store","createStore","composeWithDevTools","applyMiddleware","logger","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f756d75.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux'\nimport PropTypes from 'prop-types'\nimport {addReminder, removeReminder,clearReminder} from '../actions'\nimport moment from 'moment'\n\nclass App extends Component {\n\n  state = {\n    text: '',\n    dueDate: ''\n  }\n\n  addReminder=()=>{\n    this.props.addReminder(this.state.text, this.state.dueDate)\n  }\n\n  removeReminder=(id)=>{\n    this.props.removeReminder(id)\n  }\n\n  clearReminder=()=>{\n    this.props.clearReminder()\n  }\n\n  render() {\n    const {reminders} = this.props\n    return (\n      <div className=\"App\">\n        <div className='title'>Reminder Pro</div>\n          <div className='form-inline'>\n            <div className='form-group mr-2'>\n              <input type='text' className='form-control' placeholder='I have to do...' onChange={(event)=>this.setState({text:event.target.value})}/>\n              <input type='datetime-local' className='form-control' onChange={(event)=>this.setState({dueDate:event.target.value})}/>\n            </div>\n            <button type='button' className='btn btn-success' onClick={this.addReminder}>Add Reminder</button>\n          </div>\n\n        <ul className='list-group col-sm-8 mt-3'>\n          {reminders.map((reminder, index)=>\n            (\n            <li className='list-group-item' key={index}>\n            <div className='list-item'>\n              <div>{reminder.text}</div>\n              <div>{moment(new Date(reminder.dueDate)).fromNow()}</div>\n            </div>\n            <div className='list-item delete' onClick={()=>this.removeReminder(index)}>&#x2715;</div>          \n            </li>\n            )\n          )}\n        </ul>\n\n        <button type='button' className='btn btn-danger mt-3' onClick={this.clearReminder}>\n            Clear Reminders\n        </button>\n      </div>\n    )\n  }\n}\n\nApp.propTypes={\n  addReminder: PropTypes.func.isRequired,\n  removeReminder: PropTypes.func.isRequired,\n  clearReminder: PropTypes.func.isRequired,\n  reminders: PropTypes.array.isRequired\n}\n\nexport default connect(\n  state => ({reminders: state}),\n  {addReminder, removeReminder, clearReminder}\n)(App);\n","import {ADD_REMINDER, REMOVE_REMINDER, CLEAR_REMINDER} from './action-type'\r\n\r\n\r\n\r\nexport const addReminder = (text, dueDate) => ({\r\n    type: ADD_REMINDER,\r\n    text,\r\n    dueDate    \r\n})\r\n\r\nexport const removeReminder = (id) => ({\r\n    type: REMOVE_REMINDER,\r\n    id\r\n})\r\n\r\nexport const clearReminder = () => ({\r\n    type: CLEAR_REMINDER,\r\n\r\n})","export const ADD_REMINDER = 'ADD_REMINDER'\r\nexport const REMOVE_REMINDER= 'REMOVE_REMINDER'\r\nexport const CLEAR_REMINDER = 'CLEAR_REMINDER'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_REMINDER, REMOVE_REMINDER, CLEAR_REMINDER} from '../action-type'\r\nimport {bake_cookie, read_cookie} from 'sfcookies'\r\n\r\nconst reminders = (state = read_cookie('reminders')||[], action)=>{\r\n    let reminders = null\r\n    switch (action.type){\r\n        case ADD_REMINDER:\r\n            reminders =  [\r\n                ...state,\r\n            {text:action.text, dueDate:action.dueDate}\r\n            ]\r\n            bake_cookie('reminders', reminders)\r\n            return reminders\r\n        case REMOVE_REMINDER:\r\n            reminders = state.filter((reminder,index)=>index!==action.id)\r\n            bake_cookie('reminders', reminders)\r\n            return reminders \r\n        case CLEAR_REMINDER:\r\n            reminders = []\r\n            bake_cookie('reminders', reminders)\r\n            return reminders\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport default reminders","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware} from 'redux'\nimport reminders from './reducers'\nimport logger from 'redux-logger'\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\nconst store = createStore(\n    reminders,\n    composeWithDevTools(applyMiddleware(logger))\n)\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n     document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}